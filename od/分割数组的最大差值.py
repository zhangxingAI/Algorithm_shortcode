'''
题目描述

给定一个由若干整数组成的数组 nums，可以在数组内的任意位置进行分割，将该数组分割Q成两个非空子数组（即左数组和右数组），
分别对子数组求和得到两个值，计算这两个值的差值，请输出所有分割方案中，差值最大的值。

输入描述

第一行输入数组Q中元素个数n，1<n<=100000
第二行输入数字序列，以空格进行分隔，数字取值为4字节整数

输出描述

输出差值的最大取值

示例一
input
6
1 -2 3 4 -9 7
output
10

说明

将数组 nums 划分为两个非空数组的可行方案有：
左数组=［1且右数组= -2，3，4，-9，7］，和的差值=1-3 =2
左数组=［1，2］且右数组=［3，4，-9，7］，和的差 =-1-5|=6
左数组=［1-2，3］且右数组=［4，-9，7］，和的差值=2-2|=0 左数组=［1-2，3.4且右数组=［-9，7］，和的差值=16-（-2）=8
左数组=［1-2，3.4-9］且右数组=［71，和的差值= -3-7|=10最大的差值为10

'''
n = input()
nums = list(map(int, input().split(' ')))

def getresult():
    x = len(nums)
    max_diff = 0
    for i in range(1,x):
        diff = abs(sum(nums[:i]) - sum(nums[i:]))
        max_diff = max(max_diff, diff)

    return max_diff

print(getresult())


